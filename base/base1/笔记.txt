
注释
单行注释：	// 注释内容
多行注释:	/*换行输出*/


1.3变量
作用：给一段指定的内存空间起名，方便操作这段内存
语法：数据类型 变量名 = 初始值；
意义：方便我们管理内存空间


1.4常量
作用：用于记录程序中不可更改的数据
两种方式
	1.#define 宏常量：	#define 常量名 常量值
	2.const修饰的变量：	const 数据类型 常量名 = 常量值


1.5关键字
作用：关键字是C++中预先保留的单词（标识符）


1.6标识符名规则
不能是关键字
字母数字下划线
第一个不能是数字
标识符字母区分大小写




2数据类型
2.1整型
指定变量时需要先指定数据类型，原因是分配内存需要
short		短整型		2字节
int			整型			4字节
long		长整形		win4字节 Linux4字节（32位）8字节（64位）
long long	长长整型		8字节

2.2sizeof关键字
作用：统计数据类型占用内存大小
语法：sizeof(数据类型/变量)



2.3实型（浮点型）
单精度float		占用4字节
双精度double		占用8字节
区别在于小数点后面的数字的多少, 单精度需要在变量值后加f


2.4字符型
作用：用于显示单个字符
语法：char ch = 'a';		1字节


2.5转义字符
作用：用于表示一些不能显示出来的ASCII字符
\n换行   \\代表\ \t制表符（水平对齐作用）


2.6字符串型
作用：用于表示一串字符
C风格字符串 char 变量名[] = "字符串值";		7字节
C++风格 string 变量名 = "字符串值";			28字节
注意：中括号 双引号


2.7布尔类型bool
作用：布尔数据类型代表真或假的值
只有两个值true false     1字节


2.8数据的输入
作用：用于从键盘获取数据
关键字：cin
语法：cin >> 变量;


3运算符
3.1算术运算符
作用：用于执行代码的运算
+-*/%取模（取余）  
两个小数不能进行取模运算
前置后置递增递减    运算前后的+-


3.2赋值运算符
= += -= *= /=


3.3比较运算符
== != < > <= >=


3.4逻辑运算符
!非（取反）     &&与（有一个不为真就假）    ||或（两者都为假才为假）


4程序流程结构
顺序结构 选择结构 循环结构
4.1选择结构
4.1.1if语句
作用：执行满足条件的雨具
单行if	多行if	多条件的if语句
4.1.2三目运算符
作用：通过三目运算符实现简单的判断
语法：表达式1？表达式2：表达式3
若1为真则执行表达式2，若1为假则执行表达式3
左右都能赋值

4.1.3switch语句
作用：执行多条件分支语句
语法
switch(表达式)
{
	case 结果1： 执行语句；break
	case 结果2： 执行语句；break
	default：执行语句；break
}


4.2循环结构
4.2.1while循环语句
作用：满足循环条件，执行循环语句
语法：while（循环条件）{循环语句}
解释：只要循环条件的结果为真，就执行循环语句

break关键字：退出循环
4.2.2do...while循环语句
作用：满足循环条件，执行循环语句
语法：do{ 循环语句 } while(循环条件);
注意：与while的区别在于do...while会先执行一次循环语句，再判断循环条件


4.2.3for循环语句
作用：满足循环条件，执行循环语句
语法：for(起始表达式;条件表达式;末尾循环体){循环语句;}


4.2.4嵌套循环
作用：在循环体中再嵌套一层循环,解决一些实际问题

4.3跳转语句
break
作用：用于跳出循环结构或选择结构
break使用的时机
出现在switch条件语句中，作用是终止case并跳出switch
出现在循环语句中，作用是跳出当前的循环语句
出现在嵌套语句中，跳出最近的内层循环语句
continue语句在循环中使用



5.数组
特点：
放在一块连续的内存空间中
数组中每个元素都是相同数据类型

一维数组的三种定义方式
数据类型 数组名[数组长度]；
数据类型 数组名[数组长度] = {值1，值2...}；
数据类型 数组名[] = {值1，值2...}；
第二种方式如果不满的话，会自动用0填充

注意：定义数组的时候必须有初始长度，数组下标从0开始
数组名是常量
5.3二维数组
二维数组定义的四种方式：
数据类型 数组名[行数][列数];
数据类型 数组名[行数][列数] = { {1, 2}, {3, 4} };
数据类型 数组名[行数][列数] = {1, 2, 3, 4, 5, 6};
数据类型 数组名[][列数];
5.3.2二维数组数组名
查看行数列数首地址


6.函数
函数定义有5个步骤
1返回值类型
2函数名
3参数列表
4函数体语句
5return表达式
6.3函数调用
使用定义好的函数
实参 形参
6.4值传递
如果形参发生任何改变不会影响实参
6.5地址传递
6.6函数的声明
函数的声明可以有多次，但函数的定义只能有一次
6.7函数的分文件编写
结构化
4个步骤
1、创建后缀为.h的文件
2、创建后缀为.cpp的源文件
3、在头文件中写函数的声明
4、在源文件中写函数的定义

7指针
作用：通过指针间接访问内存
可以利用指针变量保存地址
指针就是一个地址
7.2指针变量的定义和使用
数据类型 *变量名；
通过解引用的方式找到指针指向的内存数据
7.3指针所占内存空间
32位4字节
64位8字节
7.4空指针和野指针
空指针用于初始化，不可以进行访问
空指针不能进行赋值访问
野指针：指针变量指向非法的内存空间
7.5const修饰指针
const修饰指针有三种情况
1、const修饰指针---常量指针
2、const修饰常量---指针常量
3、const即修饰指针，又修饰常量

指针数组
指针和函数


7.8指针、数组、函数


8结构体
结构体属于用户自定义的数据类型，允许用户存储不同的数据类型

8.2结构体定义和使用
语法：struct 结构体名 { 结构体成员列表 }；

8.3结构体数组

8.4结构体指针


8.5结构体嵌套结构体


8.6结构体做函数参数


8.7结构体中的const使用
用在地址传递  只读操作
节省空间







































